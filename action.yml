# action.yml
name: 'Google Secrets Masker '
description: |
  This action will load all secrets from Google Secrets Manager. This make sure that
  the values always will be masked in the logs if they somehow accidently leak.
inputs:
  workload_identity_provider:
    description: |
      The path of the workload identity provider. See config of "google-github-actions/auth@v0.8.0"
    required: true
  service_account:
    description: |
      The service account which can read the secrets. It required the role "roles/secretmanager.viewer" on the project
      and the "roles/secretmanager.Accessor" on the secrets you want to mask. See config of "google-github-actions/auth@v0.8.0"
    required: true
  filter:
    description: |
      Filter the secrets to be masked. For usage see gcloud cli. Defaults to ""
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - id: auth
      name: Autenticate with GCP
      uses: google-github-actions/auth@v0.8.0
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        create_credentials_file: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: list secrets
      shell: bash
      id: keys
      run: |
        key_list=$( for secret_key in $(gcloud secrets list --filter="${{inputs.filter}}" --format=json | jq -r '.[].name') ; do name=$(echo $secret_key| cut -d / -f4-); echo -n $name:$secret_key, ; done )
        echo masking ${key_list::-1}
        echo ::set-output name=key_list::${key_list::-1}

    - id: secrets
      uses: google-github-actions/get-secretmanager-secrets@v0
      with:
        secrets: ${{ steps.keys.outputs.key_list }}